////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 
//
//
//
//
//
////////////////////////////////////////////////////////////////////////////////////////////////////


#include "crc.h"

////////////////////////////////////////////////////////////////////////////////////////////////////

CRC8::CRC8() {
  init();
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void CRC8::init() {
   polynom = 0x31; // CRC-8 CCIT
   reg = 0x00;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t CRC8::calc( uint8_t byte ) {
  bool carry;      // flag um das oberste Bit zu merken

  for( int i = 0; i < 8; ++i ) {
    carry = reg & 0x80;

    reg <<= 1;              // Schiebe Register 1 Bit nach Links und
    if( byte & 0x80 ) {
      reg |= 1;        // Fülle das LSB mit dem naechsten Bit der Nachricht auf  
    }

    byte <<= 1;              // nächstes Bit der Nachricht

    if( carry ) {
      reg ^= polynom;      // falls flag==1, dann XOR mit Polynom
    }
  }

  return reg;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t CRC8::calc( uint8_t* p, uint16_t size ) {
  for( uint16_t i = 0; i < size; ++i ) {
    calc( p[ i ] );
  }

  return calc( 0x00 );
}
